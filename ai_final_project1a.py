# -*- coding: utf-8 -*-
"""AI Final Project1a

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J4ijUH10o762nRY_HHDlN26sEq3yy-3h
"""

import streamlit as st
import requests
from bs4 import BeautifulSoup
from textblob import TextBlob
import sqlite3

# Function to fetch headlines
def fetch_headlines(url):
    response = requests.get(url)
    if response.status_code == 200:
        soup = BeautifulSoup(response.content, 'html.parser')
        headlines = []

        # Attempt to find different types of headline elements
        headline_tags = [
            ('h3', 'gs-c-promo-heading__title'),  # BBC example
            ('h2', 'title'),  # Generic example
            ('h1', ''),  # Fallback example
        ]

        for tag, class_name in headline_tags:
            if class_name:
                items = soup.find_all(tag, class_=class_name)
            else:
                items = soup.find_all(tag)

            if items:
                for item in items:
                    headlines.append(item.get_text())
                break  # Exit the loop if headlines are found

        if not headlines:
            headlines.append("No headlines found. Please check the URL and try again.")

        return headlines
    else:
        return ["Failed to retrieve data. Please check the URL and try again."]

# Function to analyze sentiment
def analyze_sentiment(text):
    blob = TextBlob(text)
    if blob.sentiment.polarity > 0:
        return "Positive"
    elif blob.sentiment.polarity < 0:
        return "Negative"
    else:
        return "Neutral"

# Function to load comments from database
def load_comments():
    try:
        conn = sqlite3.connect('comments.db')
        c = conn.cursor()
        c.execute("SELECT * FROM comments")
        comments = c.fetchall()
        conn.close()
        return comments
    except Exception as e:
        st.error(f"An error occurred while loading comments: {e}")
        return []

# Function to save a comment to database
def save_comment(headline, user, comment, sentiment):
    try:
        conn = sqlite3.connect('comments.db')
        c = conn.cursor()
        c.execute("INSERT INTO comments (headline, user, comment, sentiment) VALUES (?, ?, ?, ?)",
                  (headline, user, comment, sentiment))
        conn.commit()
        conn.close()
    except Exception as e:
        st.error(f"An error occurred while saving the comment: {e}")

# Function for Google Custom Search API
def search_google(query, api_key, cse_id, num_results=5):
    url = f"https://www.googleapis.com/customsearch/v1?q={query}&key={api_key}&cx={cse_id}&num={num_results}"
    response = requests.get(url)
    response.raise_for_status()
    return response.json()

# Streamlit application
st.title("What's the Hot Topic In Town")

url = st.text_input("Enter the news website URL:")
if st.button("Get Headlines"):
    if url:
        headlines = fetch_headlines(url)
        st.write("### Latest News Headlines:")
        for i, headline in enumerate(headlines, 1):
            st.write(f"{i}. {headline}")
        st.session_state.headlines = headlines  # Save headlines for later use
    else:
        st.write("Please enter a valid URL.")

# Allow users to share their thoughts
st.write("## Share Your Thoughts")

if 'headlines' in st.session_state and st.session_state.headlines:
    selected_headline = st.selectbox("Select a headline to comment on:", st.session_state.headlines)
    user_name = st.text_input("Your name:")
    user_comment = st.text_area("Your comment:")
    if st.button("Submit Comment"):
        if selected_headline and user_name and user_comment:
            sentiment = analyze_sentiment(user_comment)
            save_comment(selected_headline, user_name, user_comment, sentiment)
            st.success("Your comment has been added!")
        else:
            st.error("Please fill out all fields.")

# Display existing comments
st.write("## User Comments")
comments = load_comments()
if comments:
    for comment in comments:
        st.write(f"**{comment[1]}** by *{comment[2]}* ({comment[4]})")
        st.write(f"{comment[3]}")
        st.write("---")
else:
    st.write("No comments yet.")

# Search the internet for more information based on selected headline
if 'headlines' in st.session_state and st.session_state.headlines:
    st.write("## Additional Information")
    selected_headline = st.selectbox("Select a headline to get more information:", st.session_state.headlines)
    if st.button("Search the Internet"):
        api_key = "AIzaSyAJlmQWiNPsSJnsFqpUDAmxX5Ju_TtgGmI"  # Replace with your Google API key
        cse_id = "356b32837e4d447df"    # Replace with your Custom Search Engine ID
        search_results = search_google(selected_headline, api_key, cse_id)
        st.write("Additional Information from the Internet:")
        for item in search_results.get('items', []):
            st.write(f"[{item['title']}]({item['link']}) - {item['snippet']}")